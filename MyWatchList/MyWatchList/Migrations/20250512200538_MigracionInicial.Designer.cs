// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyWatchList.Data;

#nullable disable

namespace MyWatchList.Migrations
{
    [DbContext(typeof(MyWatchListContext))]
    [Migration("20250512200538_MigracionInicial")]
    partial class MigracionInicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("MyWatchList.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("MyWatchList.Models.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalEpisodes")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("MyWatchList.Models.SerieGenre", b =>
                {
                    b.Property<int>("SerieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GenreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SerieId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("SerieGenres");
                });

            modelBuilder.Entity("MyWatchList.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MyWatchList.Models.UserSerieConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EpisodesWatched")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Liked")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SerieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SerieId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSerieConfigs");
                });

            modelBuilder.Entity("MyWatchList.Models.SerieGenre", b =>
                {
                    b.HasOne("MyWatchList.Models.Genre", "Genre")
                        .WithMany("SerieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWatchList.Models.Serie", "Serie")
                        .WithMany("SerieGenres")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Serie");
                });

            modelBuilder.Entity("MyWatchList.Models.UserSerieConfig", b =>
                {
                    b.HasOne("MyWatchList.Models.Serie", "Serie")
                        .WithMany("UserConfigs")
                        .HasForeignKey("SerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWatchList.Models.User", "User")
                        .WithMany("SeriesConfigs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Serie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyWatchList.Models.Genre", b =>
                {
                    b.Navigation("SerieGenres");
                });

            modelBuilder.Entity("MyWatchList.Models.Serie", b =>
                {
                    b.Navigation("SerieGenres");

                    b.Navigation("UserConfigs");
                });

            modelBuilder.Entity("MyWatchList.Models.User", b =>
                {
                    b.Navigation("SeriesConfigs");
                });
#pragma warning restore 612, 618
        }
    }
}
